@using Inspire.Common.Mvc.Infrastructure.BaseTypes
@using Inspire.Portal.App_GlobalResources
@using Inspire.Portal.Utilities
@using Inspire.Utilities.Extensions
@model Inspire.Portal.Models.Account.ChangePasswordViewModel
@{
    var isChangePassword = Model?.Token.IsNullOrEmpty() == true && User != null;
    if (ViewContext.Controller is BaseController baseController)
    {
        baseController.InitViewTitleAndBreadcrumbs(isChangePassword ? Resource.ChangingPassword : Resource.ForgottenPassword);
    }

    var regex = Model?.IsAdmin == true ? ConfigurationReader.AdminPasswordRegex : ConfigurationReader.UserPasswordRegex;
    var regexMessage = Model.IsAdmin ? Resource.AdminPasswordValidationMessage : Resource.PasswordValidationMessage;
}

@section Breadcrumbs
{
    @{
        Html.RenderPartial("_Breadcrums");
    }
}
<script src="~/Scripts/Controllers/Home/Home.js"></script>
<div class="content-pre-wrap">
    <div class="center">
        <div class="column-wrap content-wrap">
            <div class="form-input center">
                @using (Html.BeginForm("ChangePassword", "Account", FormMethod.Post, new { @class = "form" }))
                {
                    @Html.ValidationSummary(true)

                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.Token)

                    if (isChangePassword)
                    {
                <div class="form-input fullwidth">
                    @Html.LabelFor(m => m.OldPassword, new { @class = "required" })
                    @Html.EditorFor(
                        m => m.OldPassword,
                        new
                        {
                            htmlAttributes =
                            new
                            {
                                autofocus = "",
                                data_val = "true",
                                data_val_required = string.Format(Resource.Required, Html.DisplayNameFor(m => m.OldPassword))
                            }
                        })
                    <div class="show-password">
                        <p>
                            <a class="showPassword" data-type="old">
                                @Resource.ShowPassword
                        </a>
                    </p>
                </div>
                @Html.ValidationMessageFor(m => m.OldPassword)
                </div>
                    }

                    <div class="form-input fullwidth">
                        @Html.LabelFor(m => m.Password, new { @class = "required" })
                        @Html.EditorFor(m => m.Password, new { htmlAttributes = new { autofocus = "", data_val_regex = regexMessage, data_val_regex_pattern = regex } })
                        <div class="show-password">
                            <p><a class="showPassword">@Resource.ShowPassword
                            </a></p>
                        </div>
                        @Html.ValidationMessageFor(m => m.Password)
                    </div>

                    <div class="form-input fullwidth">
                        @Html.LabelFor(m => m.ConfirmPassword, new { @class = "required" })
                        @Html.EditorFor(m => m.ConfirmPassword, new { htmlAttributes = new { data_val_regex = regexMessage, data_val_regex_pattern = regex } })
                        <div class="show-password">
                            <p><a class="showPassword" data-type ="confirm">@Resource.ShowPassword
                            </a></p>
                        </div>
                        @Html.ValidationMessageFor(m => m.ConfirmPassword)
                    </div>

                    <div class="form-input fullwidth">
                        @Html.Partial("_Captcha")
                    </div>

                    <div class="form-input fullwidth">
                        <button class="bttn main caps">@Resource.Save</button>
                    </div>
                }
            </div>
            <div class="clear"></div>
        </div>
    </div>
</div>